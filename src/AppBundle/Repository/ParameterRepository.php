<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Category;
use Doctrine\ORM\Query;

/**
 * ParameterRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ParameterRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @return Query Returns an array of Query objects
     */
    public function getQueryParams()
    {
        return $this->createQueryBuilder('parameter')
            ->innerJoin('parameter.category', 'category')
            ->addSelect('category')
            ->orderBy('parameter.id', 'DESC')
            ->getQuery();
    }

    public function getByCategorySimple($category_id)
    {
        return $this->createQueryBuilder('parameter')
            ->innerJoin('parameter.category', 'category')
            ->where('category.id = :category_id')
            ->setParameter('category_id', $category_id)
            ->orderBy('parameter.id', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function getByCategory(Category $current_category, $location = false, $orderBy = false, $getOnlyQuery = false)
    {
        if (!$current_category) {
            return [];
        }

        $cat_ids_arr = [];
        $cat_ids_arr []= $current_category->getId();
        if ($current_category->getId() != 0) {
            $cat_ids_arr []= $current_category->getParent()->getId();
            if ($current_category->getParent()->getId() != 0) {
                $cat_ids_arr []= $current_category->getParent()->getParent()->getId();
                if ($current_category->getParent()->getParent()->getId() != 0) {
                    $cat_ids_arr []= $current_category->getParent()->getParent()->getParent()->getId();
                }
            }
        }

        $parameters = $this->createQueryBuilder('parameter')
            ->join('parameter.category', 'category')
            ->where('category.id IN (:category_ids)')
            ->setParameter('category_ids', array_values($cat_ids_arr));

        if ($orderBy == 'filters') {
            $parameters->orderBy('parameter.filtersIndex', 'ASC');
        } elseif ($orderBy == 'columns') {
            $parameters->orderBy('parameter.columnsIndex', 'ASC');
        } elseif ($orderBy == 'posts') {
            $parameters->orderBy('parameter.postsIndex', 'ASC');
        } else {
            $parameters->orderBy('parameter.id', 'DESC');
        }

        if ($location == 'filters') {
            $parameters->andWhere('parameter.isFilter = 1');
        } elseif ($location == 'columns') {
            $parameters->andWhere('parameter.isColumn = 1');
        } elseif ($location == 'posts') {
            $parameters->andWhere('parameter.isPost = 1');
        }

        if ($getOnlyQuery) {
            return $parameters->getQuery();
        }

        return $parameters->getQuery()
            ->getResult();
    }


}
