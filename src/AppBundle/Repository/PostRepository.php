<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Query;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @return Query Returns an array of Query objects
     */
    public function getQueryPosts($user_id = false)
    {
        $result = $this->createQueryBuilder('post')
            ->innerJoin('post.category', 'category')
            ->innerJoin('post.user', 'user')
            ->addSelect('category')
            ->addSelect('user');

        if ($user_id) {
            $result
                ->where('user.id = :user_id')
                ->setParameter('user_id', $user_id);
        }

        return $result
            ->orderBy('post.id', 'DESC')
            ->getQuery();
    }

    public function getCountByCategory($categoryId, $onlyValid = false)
    {
//        return $this->createQueryBuilder('post')
//            ->select('count(post.id) as posts_count')
//            ->join('post.category', 'category')
//            ->where('category.id = :category_id')
//            ->setParameter('category_id', $categoryId)
//            ->getQuery()
//            ->getSingleScalarResult();

        $query =  $this->createQueryBuilder('post')
            ->select('count(post.id) as posts_count')
            ->join('post.category', 'category')
            ->where('category.id = :category_id')
            ->setParameter('category_id', $categoryId);

        if ($onlyValid) {
            $query->andWhere('post.isValid = 1');
        }

        return $query
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function findByCategory($categoryId, $onlyValid = false, $period = false)
    {
        $query =  $this->createQueryBuilder('post')
            ->join('post.category', 'category')
            ->where('category.id = :category_id')
            ->setParameter('category_id', $categoryId)
            ->orderBy('post.id', 'DESC');

        if ($onlyValid) {
            $query->andWhere('post.isValid = 1');
        }
        if ($period && isset($period['min_datetime']) && isset($period['max_datetime'])) {
            $query->andWhere('post.createdAt BETWEEN :min_datetime AND :max_datetime')
                ->setParameter('min_datetime', $period['min_datetime'])
                ->setParameter('max_datetime', $period['max_datetime']);
        }

        return $query
            ->getQuery()
            ->getResult();
    }

    public function findByOptions($option_ids, $categoryId = false, $isValid = false, $period = false)
    {
        if (!$option_ids) {
            return null;
        }

        $query =  $this->createQueryBuilder('post')
            ->join('post.options', 'option')
            ->where('option.id IN (:option_ids)')
//            ->setParameter('option_ids', $option_ids);
            ->setParameter('option_ids', array_values($option_ids));

        if ($categoryId) {
            $query->join('post.category', 'category')
                ->andWhere('category.id = :category_id')
                ->setParameter('category_id', $categoryId);
        }
        if ($isValid !== false) {
            $query->andWhere('post.isValid = :isValid')
                ->setParameter('isValid', $isValid);
        }
        if ($period && isset($period['min_datetime']) && isset($period['max_datetime'])) {
            $query->andWhere('post.createdAt BETWEEN :min_datetime AND :max_datetime')
                ->setParameter('min_datetime', $period['min_datetime'])
                ->setParameter('max_datetime', $period['max_datetime']);
        }

        return $query->orderBy('post.id', 'DESC')
            ->getQuery()
            ->getResult();

    }


}
